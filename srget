#!/usr/bin/env python

import urlparse
import os
import sys
import socket as c_sock
import asyncore
import logging
import pickle
#from cStringIO import StringIO



output_file = None
option_c = False
numConn = 5
dest_in = None
path = '/'
port = 80

# Asyncore loop
def make_request(req_type, what, details, version="1.1"):
    """ Compose an HTTP request """
    NL = "\r\n"
    request_line = "{req_type} {what} HTTP/{ver}".format(
        req_type=req_type,
        what=what,
        ver=version
    )

    detail_lines = NL.join(
        "{}: {}".format(name, value) for name, value in details
    )

    full_request = request_line + NL + detail_lines + NL + NL
    return full_request

class HTTPClient(asyncore.dispatcher):
    def __init__(self, host, path,portIn, start_byte,end_byte, checked_date,output_file):
        asyncore.dispatcher.__init__(self)
        self.create_socket(c_sock.AF_INET, c_sock.SOCK_STREAM)
        self.connect((host, portIn))
        self.host = host
        self.logger = logging.getLogger(host+path)
        self.current_byte = start_byte
        self.output_file = output_file
        self.header = ""
        self.wait_for_header = True
        self.last_byte = end_byte
        self.sendbuf = ""
        ## make my request
        self.write(
            make_request('GET', path,
            [("host", host),
             ("Range", "bytes={start}-{end}".format(start=start_byte,end =end_byte)),
             ("If-Range", checked_date),
             ("Connection", "close")])
        )

    def write(self, msg):
        self.sendbuf += msg

    def handle_connect(self):
        pass

    def handle_close(self):
        self.logger.debug("got disconnected")
        self.close()

    def handle_read(self):
        buf = self.recv(8192)
        self.output_file.seek(self.current_byte)
        if self.wait_for_header and ('\r\n\r\n' in self.header or '\r\n\r\n' in buf):
            self.wait_for_header = False
            data_wo_header = buf[buf.find('\r\n\r\n')+4:]
            self.output_file.write(data_wo_header)

            self.current_byte += len(data_wo_header)
        elif self.wait_for_header:
            self.header += buf
        else:
            self.output_file.write(buf)
            self.current_byte += len(buf)

        self.logger.debug("recv {0} bytes".format(len(buf)))

    def writeable(self):
        return len(self.sendbuf) > 0

    def handle_write(self):
        bytes_sent = self.send(self.sendbuf)
        self.sendbuf = self.sendbuf[bytes_sent:]

# Class for one connection
class Single_HTTPClient(asyncore.dispatcher):
    def __init__(self, host, path,portIn, start_byte, checked_date,output_file,pickle_out):
        asyncore.dispatcher.__init__(self)
        self.create_socket(c_sock.AF_INET, c_sock.SOCK_STREAM)
        self.connect((host, portIn))
        self.host = host
        self.logger = logging.getLogger(host+path)
        self.current_byte = start_byte
        self.output_file = output_file
        self.header = ""
        self.wait_for_header = True
        self.pickle_d = {"Finished": 0}
        self.pickle_out = pickle_out
        self.sendbuf = ""

        ## make my request
        self.write(
            make_request('GET', path,
            [("host", host),
             ("Range", "bytes={start}-".format(start=start_byte)),
             ("If-Range", checked_date),
             ("Connection", "close")])
        )

    def write(self, msg):
        self.sendbuf += msg

    def handle_connect(self):
        pass

    def handle_close(self):
        self.close()

    def handle_read(self):
        buf = self.recv(8192)
        if self.wait_for_header and ('\r\n\r\n' in self.header or '\r\n\r\n' in buf):
            self.wait_for_header = False
            data_wo_header = buf[buf.find('\r\n\r\n')+4:]
            self.output_file.write(data_wo_header)
            self.current_byte += len(data_wo_header)
            self.pickle_d["Finished"] = self.current_byte
            with open(self.pickle_out,'wb') as rf:
                pickle.dump(self.pickle_d,rf)

        elif self.wait_for_header:
            self.header += buf
        
        else:
            self.output_file.write(buf)
            self.current_byte += len(buf)
            self.pickle_d["Finished"] = self.current_byte
            with open(self.pickle_out,'wb') as rf:
                pickle.dump(self.pickle_d,rf)

    def writeable(self):
        return len(self.sendbuf) > 0

    def handle_write(self):
        bytes_sent = self.send(self.sendbuf)
        self.sendbuf = self.sendbuf[bytes_sent:]


# get byte from gap
def byte_from_gap(lst):
    returned_list = []
    for gap in lst:
        returned_list.append("bytes={s}-{e]").format(s=gap[0],e=gap[1])
    return returned_list

def cut_whole_content(content):
    start = 0
    gap = 200000
    end = content-gap
    returned_gap = []
    while start < end:
        returned_gap.append((start,gap-1))
        start += gap
    returned_gap.append((start,content-1))
    return returned_gap


# Set byte range
def cut_content(content_list,connection_number):
    returned_list = []
    connection_number = int(connection_number)
    start_point = content_list[0]
    one_size = (content_list[1] - content_list[0]+1)/connection_number
    while connection_number > 1:
        end_point = start_point + one_size-1
        returned_list += [(start_point,end_point)]
        start_point += one_size
        connection_number -= 1
    returned_list += [(start_point,content_list[1])]

    return returned_list

# Organize address and port for connection
def setAddress(addIn):
    fullAddress = urlparse.urlparse(addIn)
    if (fullAddress.netloc).find(":") != -1:
        dest = fullAddress.netloc[:(fullAddress.netloc).find(":")]

    else:
        dest = fullAddress.netloc
    if fullAddress.port != None:
        port = fullAddress.port
    else:
        port = 80
    path = fullAddress.path

    return fullAddress,dest,port,path


    
def getHeadRequest(serv, objName):
    return ("HEAD {o} HTTP/1.1\r\n"+
        "Host: {s}\r\n"+
        "Connection: close\r\n\r\n").format(o=objName, s=serv)



def split_header(out_file):
    header_dict = dict()
    with open(out_file,'rb') as h:
        all_data = h.read()        
    header_list = all_data.split("\r\n")
    for each in header_list[1:-2]:
        current_element = each.split(": ")
        header_dict[current_element[0]] = current_element[1]
    return header_dict    


def get_head(servName,portIn,reqHead,output_head):
    head_sock = c_sock.socket(c_sock.AF_INET,c_sock.SOCK_STREAM)
    head_sock.connect((servName,portIn))
    head_sock.send(reqHead)
    data = ""
    with open(output_head,'wb') as h:
        while True:
            current = head_sock.recv(1024000)
            h.write(current)
            data+=current
            if data[-4:] == "\r\n\r\n":    
                head_sock.close()
                break
    return sys.getsizeof(data)




def basic_download(addr_in):
    if (not (os.path.exists(output_file))) and (not (os.path.exists(output_file+'.dwnld'))):
        # set address
        addr,dest,port,path = setAddress(addr_in)
        # save header
        reqHead = getHeadRequest(dest,path)
        get_head(dest,port,reqHead,output_file+'.dwnld.head')
        header_content = split_header(output_file+'.dwnld.head')

        # handle redirect
        try:
            path = header_content["location"]
            new_addr = "http://"+dest+'/'+path
            basic_download(new_addr)
            return None
        except:
            pass

        # create file
        open_outfile = open(output_file+'.dwnld','ab')

        # set client
        working_core = [Single_HTTPClient(dest,path,port,0,"",open_outfile,output_file+'.pickle')]

        asyncore.loop()

        try:
            os.rename(output_file+'.dwnld',output_file)
        except:
            pass
        try:
            os.remove(output_file+'.dwnld.head')
        except:
            pass
        try:
            os.remove(output_file+'.pickle')
        except:
            pass



    else:
        # check that file is not complete(exist in directory)
        if not (os.path.exists(output_file)):
            try:
                addr,dest,port,path = setAddress(addr_in)
                is_ETag = False
                is_Date = False

                # get old header
                try:    
                    header_dict = split_header(output_file+".dwnld.head")
                except:
                    print "File has been damaged. Start new download."
                    try:
                        os.remove(output_file+'.dwnld')
                    except:
                        pass
                    try:
                        os.remove(output_file+'.dwnld.head')
                    except:
                        pass
                    try:
                        os.remove(output_file+'pickle')
                    except:
                        pass
                    basic_download(addr_in)
                    return None
                
                # get starting bytes
                try:
                    with open(output_file+'.pickle','rb') as rf:
                        previous_progress = pickle.load(rf)
                    resume_start = previous_progress.values()[0]
                except:
                    print "File has been damaged. Start new download."
                    try:
                        os.remove(output_file+'.dwnld')
                    except:
                        pass
                    try:
                        os.remove(output_file+'.dwnld.head')
                    except:
                        pass
                    try:
                        os.remove(output_file+'pickle')
                    except:
                        pass
                    basic_download(addr_in)
                    return None

                # check the version of content
                try:
                    checked_date = header_dict["ETag"]
                    is_ETag = True
                
                except:
                    try:
                        checked_date = header_dict["Last-Modified"]
                        is_Date = True
                    except:
                        is_Date = False

                if is_ETag or is_Date:

                    # check that modified or not
                    head_req = getHeadRequest(dest,path)
                    get_head(dest,port,head_req,output_file+'_new.head')
                    new_header_content = split_header(output_file+"_new.head")
                    os.remove(output_file+"_new.head")

                    if is_ETag:
                        if new_header_content["ETag"] != checked_date:
                            print "Your file has been modified, starting new download"
                            try:
                                os.remove(output_file+'.dwnld')
                            except:
                                pass
                            try:
                                os.remove(output_file+'.dwnld.head')
                            except:
                                pass
                            try:
                                os.remove(output_file+'pickle')
                            except:
                                pass
                            basic_download(addr_in)

                        else:
                            # handle redirect
                            try:
                                path = header_dict["location"]
                                new_addr = "http://"+dest+'/'+path
                                basic_download(new_addr)
                                return None
                            except:
                                pass

                            # create file
                            open_outfile = open(output_file+'.dwnld','ab')

                            working_core = [Single_HTTPClient(dest,path,port,resume_start,checked_date,open_outfile,output_file+'.pickle')]
                            asyncore.loop()
                            try:
                                os.rename(output_file+'.dwnld',output_file)
                            except:
                                pass
                            try:
                                os.remove(output_file+'.dwnld.head')
                            except:
                                pass
                            try:
                                os.remove(output_file+'.pickle')
                            except:
                                pass

                    else:
                        if new_header_content["Last-Modified"] != checked_date:
                            print "Your file has been modified, starting new download"
                            try:
                                os.remove(output_file+'.dwnld')
                            except:
                                pass
                            try:
                                os.remove(output_file+'.dwnld.head')
                            except:
                                pass
                            try:
                                os.remove(output_file+'pickle')
                            except:
                                pass
                            basic_download(addr_in)
                        else:
                            # handle redirect
                            try:
                                path = header_dict["location"]
                                new_addr = "http://"+dest+'/'+path
                                basic_download(new_addr)
                                return None
                            except:
                                pass

                            # create file
                            open_outfile = open(output_file+'.dwnld','ab')

                            working_core = [Single_HTTPClient(dest,path,port,resume_start,checked_date,open_outfile,output_file+'.pickle')]
                            asyncore.loop()
                            try:
                                os.rename(output_file+'.dwnld',output_file)
                            except:
                                pass
                            try:
                                os.remove(output_file+'.dwnld.head')
                            except:
                                pass
                            try:
                                os.remove(output_file+'.pickle')
                            except:
                                pass


                else:
                    print "Your file cannot be resume. Start new downloading"
                    try:
                        os.remove(output_file+'.dwnld')
                    except:
                        pass
                    try:
                        os.remove(output_file+'.dwnld.head')
                    except:
                        pass
                    try:
                        os.remove(output_file+'.pickle')
                    except:
                        pass

                    basic_download(addr_in)
            except:
                print "Connection error"
        else:
            print "File already existed"


# for multiple connection
def multi_download(connection_number,addr_in):
    if (not (os.path.exists(output_file))) and (not (os.path.exists(output_file+'.dwnld'))):
        try:
            # set address
            addr,dest,port,path = setAddress(addr_in)
            # get content_length + save header
            reqHead = getHeadRequest(dest,path)
            get_head(dest,port,reqHead,output_file+'.dwnld.head')
            
            header_content = split_header(output_file+'.dwnld.head')

            # check for redirect
            try:
                path = header_content["location"]
                addr_in = "http://"+dest+'/'+path
                multi_download(connection_number,addr_in)
                return None
            except:
                pass

            # check multi-connect-able
            try:
                content_length = long(header_content['Content-Length'])
            except:
                print "This address is not possible for multiple connection. Download with 1 connection"
                basic_download(addr_in)
                return None

            # set each connection's partition
            file_partition = cut_whole_content(content_length)

            open_outfile = open(output_file+'.dwnld','ab')
            open_outfile.write(" "*content_length)


            # work in each partition
            try:
                for each_partition in file_partition:
                    connection_byte_range = cut_content(each_partition,connection_number)

                    # set up clients
                    clients = []    
                    for each_part in connection_byte_range:
                        clients += [HTTPClient(dest,path,port,each_part[0],each_part[1]," ",open_outfile)]
                        
                        pickle_dict = {"Finished": each_part[1]}
                        
                        asyncore.loop()
                        
                        with open(output_file+'.pickle','wb') as handle:
                            pickle.dump(pickle_dict,handle)

                try:
                    os.rename(output_file+'.dwnld',output_file)
                except:
                    pass
                try:
                    os.remove(output_file+'.dwnld.head')
                except:
                    pass
                try:
                    os.remove(output_file+'.pickle')
                except:
                    pass

            except:
                print "Connection error"

        except:
            print "Connection error"
            
    else:
        if not (os.path.exists(output_file)):
            try:
                with open(output_file+'.pickle','rb') as rf:
                    previous_progress = pickle.load(rf)
                resume_start = previous_progress.values()[0]+1

                addr,dest,port,path = setAddress(addr_in)
                is_ETag = False
                is_Date = False  
                header_dict = split_header(output_file+".dwnld.head")
                total_content_length = long(header_dict["Content-Length"])
            
                # get ETAG or last-modifed date
                try:
                    checked_date = header_dict["ETag"]
                    is_ETag = True
                
                except:
                    try:
                        checked_date = header_dict["Last-Modified"]
                        is_Date = True
                    except:
                        pass

                if is_ETag or is_Date:

                    # check that modified or not
                    head_req = getHeadRequest(dest,path)
                    get_head(dest,port,head_req,output_file+'_new.head')
                    new_header_content = split_header(output_file+"_new.head")
                    os.remove(output_file+"_new.head")
                    # check for redirect
                    try:
                        path = new_header_content["location"]
                        addr_in = "http://"+dest+'/'+path
                        multi_download(connection_number,addr_in)
                        return None
                    except:
                        pass
                    if is_ETag:
                        if new_header_content["ETag"] != checked_date:
                            print "Your file has been modified, starting new download"
                            try:
                                os.remove(output_file+'.dwnld')
                            except:
                                pass
                            try:
                                os.remove(output_file+'.dwnld.head')
                            except:
                                pass
                            try:
                                os.remove(output_file+'.pickle')
                            except:
                                pass
                            multi_download(connection_number,addr_in)

                        else:
                            file_partition = cut_whole_content(total_content_length - resume_start)
                            open_outfile = open(output_file+'.dwnld','ab')
                            try:
                                for each_partition in file_partition:
                                    connection_byte_range = cut_content(each_partition,connection_number)

                                    # set up clients
                                    clients = []    
                                    for each_part in connection_byte_range:
                                        clients += [HTTPClient(dest,path,port,each_part[0],each_part[1],checked_date,open_outfile)]
                                        pickle_dict = {"Finished": each_part[1]}
                                        
                                        asyncore.loop()
                                        
                                        # saved the last-finished byte
                                        with open(output_file+'.pickle','wb') as handle:
                                            pickle.dump(pickle_dict,handle)

                                try:
                                    os.rename(output_file+'.dwnld',output_file)
                                except:
                                    pass
                                try:
                                    os.remove(output_file+'.dwnld.head')
                                except:
                                    pass
                                try:
                                    os.remove(output_file+'.pickle')
                                except:
                                    pass

                            except:
                                print "Connection error"
                                

                    else:
                        if new_header_content["Last-Modified"] != checked_date:
                            print "Your file has been modified, starting new download"
                            try:
                                os.remove(output_file+'.dwnld')
                            except:
                                pass
                            try:
                                os.remove(output_file+'.dwnld.head')
                            except:
                                pass
                            try:
                                os.remove(output_file+'.pickle')
                            except:
                                pass
                            multi_download(connection_number,addr_in)
                        else:
                            file_partition = cut_whole_content(total_content_length - resume_start)
                            open_outfile = open(output_file+'.dwnld','ab')
                            try:
                                for each_partition in file_partition:
                                    connection_byte_range = cut_content(each_partition,connection_number)

                                    # set up clients
                                    clients = []    
                                    for each_part in connection_byte_range:
                                        clients += [HTTPClient(dest,path,port,each_part[0],each_part[1],checked_date,open_outfile)]
                                        pickle_dict = {"Finished": each_part[1]}
                                        
                                        asyncore.loop()
                                        
                                        with open(output_file+'.pickle','wb') as handle:
                                            pickle.dump(pickle_dict,handle)

                                try:
                                    os.rename(output_file+'.dwnld',output_file)
                                except:
                                    pass
                                try:
                                    os.remove(output_file+'.dwnld.head')
                                except:
                                    pass
                                try:
                                    os.remove(output_file+'.pickle')
                                except:
                                    pass

                            except:
                                print "Connection error"

                else:
                    print "Your file cannot be resume. Start new downloading"
                    try:
                        os.remove(output_file+'.dwnld')
                    except:
                        pass
                    try:
                        os.remove(output_file+'.dwnld.head')
                    except:
                        pass
                    try:
                        os.remove(output_file+'.pickle')
                    except:
                        pass

                    multi_download(connection_number,addr_in)

            except:
                print "File has been damaged. Start new downloading"
                try:
                    os.remove(output_file+'.dwnld')
                except:
                    pass
                try:
                    os.remove(output_file+'.dwnld.head')
                except:
                    pass
                try:
                    os.remove(output_file+'.pickle')
                except:
                    pass

                multi_download(connection_number,addr_in)

        else:
            print "File already existed"





# Organize input-command line
if len(sys.argv) == 4:
    output_file = sys.argv[2]
    dest_in = sys.argv[3]
    basic_download(dest_in)
elif len(sys.argv) == 5:
    output_file = sys.argv[2]
    option_c = True
    dest_in = sys.argv[4]
    multi_download(numConn,dest_in)
elif len(sys.argv) == 6:
    output_file = sys.argv[2]
    option_c = True
    numConn = sys.argv[4]
    dest_in = sys.argv[5]
    multi_download(numConn,dest_in)

